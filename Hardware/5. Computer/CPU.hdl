// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a = instruction, b = AluOut, sel = instruction[15], out = LoadToA); //Determines wether you load an instruction or data
	Mux(a = true, b = instruction[5], sel = instruction[15], out = loadA); //determines if it is a c-instruction keeping data only makes sense there
	ARegister(in = LoadToA, load = loadA, out = ARegOut, out[0..14]=addressM); // if you should and can write to A you load either calculation or instruction

	Mux(a = false, b = instruction[4], sel = instruction[15], out = loadD); //determines if it is a c-instruction keeping data only makes sense there
	DRegister(in =  AluOut, load = loadD, out = LoadToAluX);
	
	Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM); //determines if it is a c-instruction keeping data only makes sense there

	Mux16(a = ARegOut, b = inM, sel = instruction[12], out = LoadToAluY); // stored input or read from memory
	
	ALU(x = LoadToAluX, y = LoadToAluY, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], ng = outNeg, zr = outZero, out = AluOut, out = outM); //Calculation
	
	
	//Calculate jump by creating the cases
	Or(a = outNeg, b = outZero, out = notPos);
	Not(in = notPos, out = pos);
	
	//checking for the outcomes
	And(a = instruction[2], b = outNeg, out = J3);
	And(a = instruction[1], b = outZero, out = J2);
	And(a = instruction[0], b = pos, out = J1);
	
	//Determines wether we should jump
	Or8Way(in[0] = J1, in[1] = J2, in[2] = J3, in[3..7] = false, out = jumpCode);
	Mux(a = false, b = jumpCode, sel = instruction[15], out = jump);
	
	//controls flow
	PC(in =  ARegOut, load = jump, inc = true, reset = reset, out[0..14] = pc);
		
}